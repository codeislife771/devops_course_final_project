name: Infra (Plan/Apply/Destroy)

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        options: [plan, apply, destroy]
        default: plan
      dir:
        default: terraform

jobs:
  tf:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.dir }}

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ vars.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3

      # Return of state before destroy
      - name: Restore tfstate (only for destroy)
        if: inputs.action == 'destroy'
        uses: actions/download-artifact@v4
        with:
          name: tfstate
          path: ${{ inputs.dir }}

      # --- Simple Kubernetes cleanup before Terraform destroy ---
      - name: Install kubectl (only for destroy)
        if: inputs.action == 'destroy'
        uses: azure/setup-kubectl@v4

      - name: Connect kubectl to EKS (only for destroy)
        if: inputs.action == 'destroy'
        run: |
          # Required: point kubectl at your EKS cluster
          aws eks update-kubeconfig --name "${{ vars.EKS_CLUSTER_NAME }}" --region "${{ vars.AWS_REGION }}"

      - name: Undeploy app (only for destroy)
        if: inputs.action == 'destroy'
        run: |
          # Delete the LoadBalancer Service in AWS
          kubectl delete service flask-service --ignore-not-found

          # Small wait so AWS starts releasing network resources
          sleep 20

          # Removes Deployments/ConfigMaps/etc. created from deploy/ - delete the same manifests you applied earlier
          kubectl delete -f deploy/ --ignore-not-found

          # Optional: show any remaining LoadBalancer Services (empty = clean)
          kubectl get svc -A | (grep LoadBalancer || true)
      # --- end of Kubernetes cleanup ---

      - name: terraform init
        run: terraform init -input=false

      - name: terraform plan
        if: inputs.action == 'plan'
        run: terraform plan

      - name: terraform apply
        if: inputs.action == 'apply'
        run: terraform apply -auto-approve

      # שמירת ה-state אחרי apply
      - name: Save tfstate (only for apply)
        if: inputs.action == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: tfstate
          path: |
            ${{ inputs.dir }}/terraform.tfstate
            ${{ inputs.dir }}/terraform.tfstate.backup
          retention-days: 14

      - name: terraform destroy
        if: inputs.action == 'destroy'
        run: terraform destroy -auto-approve
